{
	"info": {
		"_postman_id": "86c98120-268d-47c1-b7c7-7b73c0e8c3e3",
		"name": "VetApp",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23337307"
	},
	"item": [
		{
			"name": "Create a new pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests for \"Create a new pet\" request",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has _id property\", function () {",
							"    const responseBody = pm.response.json();",
							"    pm.expect(responseBody).to.have.property('_id');",
							"    pm.environment.set('petId', responseBody['_id']);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Fluffy\",\n  \"species\": \"Cat\",\n  \"age\": 3,\n  \"owner\": \"Alice\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/pets",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"pets"
					]
				},
				"description": "Create a new pet"
			},
			"response": []
		},
		{
			"name": "Get all pets",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests for \"Get all pets\" request",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    const responseBody = pm.response.json();",
							"    pm.expect(responseBody).to.be.an('array');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/pets",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"pets"
					]
				},
				"description": "Get all pets"
			},
			"response": []
		},
		{
			"name": "Get a pet by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests for \"Get a pet by id\" request",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has _id property\", function () {",
							"    const responseBody = pm.response.json();",
							"    pm.expect(responseBody).to.have.property('_id');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/pets/{{petId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"pets",
						"{{petId}}"
					]
				},
				"description": "Get a pet by id"
			},
			"response": []
		},
		{
			"name": "Update a pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests for \"Update a pet\" request",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has _id and updated name property\", function () {",
							"    const responseBody = pm.response.json();",
							"    pm.expect(responseBody).to.eql({",
							"        _id: pm.environment.get('petId'),",
							"        name: \"Whiskers\",",
							"        species: \"Cat\",",
							"        age: 3,",
							"        owner: \"Alice\",",
							"        __v: 0",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Whiskers\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/pets/{{petId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"pets",
						"{{petId}}"
					]
				},
				"description": "Update a pet"
			},
			"response": []
		},
		{
			"name": "Delete a pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests for \"Delete a pet\" request",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has _id property\", function () {",
							"    const responseBody = pm.response.json();",
							"    pm.expect(responseBody).to.have.property('_id');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/pets/{{petId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"pets",
						"{{petId}}"
					]
				},
				"description": "Delete a pet"
			},
			"response": []
		},
		{
			"name": "Handle not found for getting a deleted pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests for \"Handle not found for getting a deleted pet\" request",
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/pets/{{petId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"pets",
						"{{petId}}"
					]
				},
				"description": "Handle not found for getting a deleted pet"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://vet.serveo.net",
			"type": "string"
		},
		{
			"key": "petId",
			"value": "",
			"type": "string"
		}
	]
}